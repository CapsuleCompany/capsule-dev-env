version: '3.8'

services:
  traefik:
    image: traefik:v2.9
    container_name: traefik
    command:
      - --api.insecure=true
      - --providers.docker=true
      - --entrypoints.web.address=:80
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml
      - ./traefik/conf:/etc/traefik/conf
    networks:
      - web

  frontend:
    container_name: frontend
    build:
      context: ./src/capsule-service-app
      dockerfile: Dockerfile
    env_file:
      - .env
    volumes:
      - ./src/capsule-service-app:/app
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_SERVICE_NAME=frontend
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`dev.capsuleio.com`) && !PathPrefix(`/api`)"
      - "traefik.http.routers.frontend.priority=10"
      - "traefik.http.services.frontend.loadbalancer.server.port=3000"
    networks:
      - web

  location-api:
    container_name: location-api
    build:
      context: ./src/location-service-api
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_SERVICE_NAME=location-api
      - PYTHONUNBUFFERED=1
    volumes:
      - ./src/location-service-api:/app
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.location-api.rule=PathPrefix(`/api/location`) || PathPrefix(`/api/routing`)"
      - "traefik.http.services.location-api.loadbalancer.server.port=8000"
    depends_on:
      - traefik
      - db-postgis
    networks:
      - web

  notification-api:
    container_name: notification-api
    build:
      context: ./src/notification-service-api
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_SERVICE_NAME=notification-api
      - PYTHONUNBUFFERED=1
    volumes:
      - ./src/notification-service-api:/app
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.notification-api.rule=PathPrefix(`/api/notification`)"
      - "traefik.http.services.notification-api.loadbalancer.server.port=8000"
    depends_on:
      - db
      - traefik
    networks:
      - web

  payment-api:
    container_name: payment-api
    build:
      context: ./src/payment-service-api
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_SERVICE_NAME=payment-api
      - PYTHONUNBUFFERED=1
    volumes:
      - ./src/payment-service-api:/app
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.payment-api.rule=PathPrefix(`/api/payment`)"
      - "traefik.http.services.payment-api.loadbalancer.server.port=8000"
    depends_on:
      - db
      - traefik
    networks:
      - web

  schedule-api:
    container_name: schedule-api
    build:
      context: ./src/schedule-service-api
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_SERVICE_NAME=schedule-api
      - PYTHONUNBUFFERED=1
    volumes:
      - ./src/schedule-service-api:/app
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.schedule-api.rule=PathPrefix(`/api/schedule`)"
      - "traefik.http.services.schedule-api.loadbalancer.server.port=8000"
    depends_on:
      - db
      - traefik
    networks:
      - web

  service-api:
    container_name: tenant-api
    build:
      context: ./src/tenant-service-api
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_SERVICE_NAME=service-api
      - PYTHONUNBUFFERED=1
    volumes:
      - ./src/tenant-service-api:/app
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.tenant-api.rule=PathPrefix(`/api/tenant`) || PathPrefix(`/api/services`)"
      - "traefik.http.services.tenant-api.loadbalancer.server.port=8000"
    depends_on:
      - db
      - traefik
      - kafka
    networks:
      - web

  user-api:
    container_name: user-api
    build:
      context: ./src/user-service-api
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_SERVICE_NAME=user-api
      - PYTHONUNBUFFERED=1
    volumes:
      - ./src/user-service-api:/app
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.user-api.rule=PathPrefix(`/api/auth`)"
      - "traefik.http.services.user-api.loadbalancer.server.port=8000"
    depends_on:
      - traefik
      - db
      - kafka
      - service-api
    networks:
      - web

  db:
    container_name: postgres
    image: postgres:15
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - .env
    ports:
      - "5432:5432"
    depends_on:
      - traefik
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.postgres.rule=Host(`db`)"
      - "traefik.http.services.postgres.loadbalancer.server.port=5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: "app_db"
    networks:
      - web

  db-postgis:
    container_name: postgis
    platform: linux/amd64
    image: postgis/postgis:15-3.3
    volumes:
      - postgis_data:/var/lib/postgresql/data
    env_file:
      - .env
    ports:
      - "5434:5432"
    depends_on:
      - traefik
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.postgis.rule=Host(`postgis`)"
      - "traefik.http.services.postgis.loadbalancer.server.port=5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: "geo_db"
    networks:
      - web

  redis:
    container_name: redis
    image: redis:latest
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_SERVICE_NAME=payment-api
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - web

  redis-insight:
    container_name: redis-insight
    image: redislabs/redisinsight:latest
    ports:
      - "8001:8001"
    volumes:
      - redisinsight_data:/db
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      - redis
      - traefik
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.redis-insight.rule=Host(`redis.dev.capsuleio.com`)"
      - "traefik.http.services.redis-insight.loadbalancer.server.port=8001"
    networks:
      - web

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_CLIENT_PORT}
      ZOOKEEPER_TICK_TIME: ${ZOOKEEPER_TICK_TIME}
    env_file:
      - .env
    ports:
      - "2181:2181"
    networks:
      - web

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    env_file:
      - .env
    depends_on:
      - zookeeper
      - traefik
    environment:
      KAFKA_BROKER_ID: ${KAFKA_BROKER_ID}
      KAFKA_ZOOKEEPER_CONNECT: ${KAFKA_ZOOKEEPER_CONNECT}
      KAFKA_ADVERTISED_LISTENERS: ${KAFKA_ADVERTISED_LISTENERS}
      KAFKA_LISTENERS: ${KAFKA_LISTENERS}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: ${KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR}
      KAFKA_LOG_RETENTION_HOURS: ${KAFKA_LOG_RETENTION_HOURS}
      KAFKA_MAX_REQUEST_SIZE: ${KAFKA_MAX_REQUEST_SIZE}
      KAFKA_MESSAGE_MAX_BYTES: ${KAFKA_MESSAGE_MAX_BYTES}
      KAFKA_REPLICA_FETCH_MAX_BYTES: ${KAFKA_REPLICA_FETCH_MAX_BYTES}
      KAFKA_HEAP_OPTS: ${KAFKA_HEAP_OPTS}
      OTEL_EXPORTER_OTLP_ENDPOINT: "http://otel-collector:4317"
      OTEL_SERVICE_NAME: "kafka"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.kafka.rule=Host(`kafka.dev.capsuleio.com`)"
      - "traefik.http.services.kafka.loadbalancer.server.port=9092"
    ports:
      - "9092:9092"
    networks:
      - web

  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: kafdrop
    depends_on:
      - zookeeper
      - kafka
    environment:
      KAFKA_BROKERCONNECT: "kafka:9092"
      JVM_OPTS: "-Xms32M -Xmx64M"
      SERVER_PORT: 9000
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.kafdrop.rule=Host(`kafdrop.dev.capsuleio.com`)"
      - "traefik.http.services.kafdrop.loadbalancer.server.port=9000"
    networks:
      - web

  debezium-connect:
    image: debezium/connect:2.3
    container_name: debezium-connect
    depends_on:
      - kafka
      - zookeeper
      - db
    environment:
      BOOTSTRAP_SERVERS: kafka:9092
      GROUP_ID: "1"
      CONFIG_STORAGE_TOPIC: "connect-configs"
      OFFSET_STORAGE_TOPIC: "connect-offsets"
      STATUS_STORAGE_TOPIC: "connect-status"
      CONNECT_LOG_LEVEL: "INFO"
      CONNECT_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_REST_ADVERTISED_HOST_NAME: "debezium-connect"
      CONNECT_PLUGIN_PATH: "/kafka/connect"
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4317
      OTEL_SERVICE_NAME: payment-api
    ports:
      - "8083:8083"
    networks:
      - web

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
      - "9411:9411"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jaeger.rule=Host(`jaeger.dev.capsuleio.com`)"
      - "traefik.http.services.jaeger.loadbalancer.server.port=16686"
    networks:
      - web

  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: otel-collector
    volumes:
      - ./otel-config.yml:/etc/otel/config.yaml
    command: ["--config=/etc/otel/config.yaml"]
    ports:
      - "4317:4317" # OTLP gRPC
      - "4318:4318" # OTLP HTTP
      - "55680:55680" # Legacy OpenCensus
    networks:
      - web

volumes:
  postgres_data:
  postgis_data:
  redis_data:
  redisinsight_data:

networks:
  web:
    driver: bridge
