version: '3.8'

services:
  traefik:
    image: traefik:v2.9
    container_name: traefik
    command:
      - --api.insecure=true
      - --providers.docker=true
      - --entrypoints.web.address=:80
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml
      - ./traefik/conf:/etc/traefik/conf
    networks:
      - web

  frontend:
    container_name: frontend
    build:
      context: ./src/capsule-service-app
      dockerfile: Dockerfile
    env_file:
      - .env
    volumes:
      - ./src/capsule-service-app:/app
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.capsule.rule=Host(`dev.capsuleio.com`)"
      - "traefik.http.services.capsule.loadbalancer.server.port=3000"
    networks:
      - web

  location-api:
    container_name: location-api
    build:
      context: ./src/location-service-api
      dockerfile: Dockerfile
    env_file:
      - .env
    volumes:
      - ./src/location-service-api:/app
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.location-api.rule=PathPrefix(`/api/location`) || PathPrefix(`/api/routing`)"
      - "traefik.http.services.location-api.loadbalancer.server.port=8000"
    depends_on:
      - db
      - traefik
    networks:
      - web

  # Add other services like notification-api, payment-api, etc. here...

  user-api:
    container_name: user-api
    build:
      context: ./src/user-service-api
      dockerfile: Dockerfile
    env_file:
      - .env
    volumes:
      - ./src/user-service-api:/app
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.user-api.rule=PathPrefix(`/api/auth`)"
      - "traefik.http.services.user-api.loadbalancer.server.port=8000"
    depends_on:
      - db
      - traefik
    networks:
      - web

  db:
    container_name: postgres
    image: postgres:15
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - .env
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.capsule.rule=Host(`db`)"
    networks:
      - web

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_CLIENT_PORT}
      ZOOKEEPER_TICK_TIME: ${ZOOKEEPER_TICK_TIME}
    env_file:
      - .env
    ports:
      - "2181:2181"
    networks:
      - web

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    env_file:
      - .env
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: ${KAFKA_BROKER_ID}
      KAFKA_ZOOKEEPER_CONNECT: ${KAFKA_ZOOKEEPER_CONNECT}
      KAFKA_ADVERTISED_LISTENERS: ${KAFKA_ADVERTISED_LISTENERS}
      KAFKA_LISTENERS: ${KAFKA_LISTENERS}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: ${KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR}
      KAFKA_LOG_RETENTION_HOURS: ${KAFKA_LOG_RETENTION_HOURS}
      KAFKA_MAX_REQUEST_SIZE: ${KAFKA_MAX_REQUEST_SIZE}
      KAFKA_MESSAGE_MAX_BYTES: ${KAFKA_MESSAGE_MAX_BYTES}
      KAFKA_REPLICA_FETCH_MAX_BYTES: ${KAFKA_REPLICA_FETCH_MAX_BYTES}
      KAFKA_HEAP_OPTS: ${KAFKA_HEAP_OPTS}
    ports:
      - "9092:9092"
    networks:
      - web

volumes:
  postgres_data:

networks:
  web:
    driver: bridge