version: '3.8'

services:
  traefik:
    image: traefik:v2.9
    container_name: traefik
    command:
      - --api.insecure=true
      - --providers.docker=true
      - --entrypoints.web.address=:80
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml
      - ./traefik/conf:/etc/traefik/conf
    networks:
      - web

  frontend:
    container_name: frontend
    build:
      context: ./src/capsule-service-app
      dockerfile: Dockerfile
    env_file:
      - .env
    volumes:
      - ./src/capsule-service-app:/app
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.capsule.rule=Host(`dev.capsuleio.com`)"
      - "traefik.http.services.capsule.loadbalancer.server.port=3000"
    networks:
      - web

  location-api:
    container_name: location-api
    build:
      context: ./src/location-service-api
      dockerfile: Dockerfile
    env_file:
      - .env
    volumes:
      - ./src/location-service-api:/app
      - .env:/app/.env
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.location-api.rule=PathPrefix(`/location`)"
      - "traefik.http.services.location-api.loadbalancer.server.port=8000"
    depends_on:
      - db
      - traefik
    networks:
      - web

  notification-api:
    container_name: notification-api
    build:
      context: ./src/notification-service-api
      dockerfile: Dockerfile
    env_file:
      - .env
    volumes:
      - ./src/notification-service-api:/app
      - .env:/app/.env
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.notification-api.rule=PathPrefix(`/notification`)"
      - "traefik.http.services.notification-api.loadbalancer.server.port=8000"
    depends_on:
      - db
      - traefik
    networks:
      - web

  payment-api:
    container_name: payment-api
    build:
      context: ./src/payment-service-api
      dockerfile: Dockerfile
    env_file:
      - .env
    volumes:
      - ./src/payment-service-api:/app
      - .env:/app/.env
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.payment-api.rule=PathPrefix(`/payment`)"
      - "traefik.http.services.payment-api.loadbalancer.server.port=8000"
    depends_on:
      - db
      - traefik
    networks:
      - web

  schedule-api:
    container_name: schedule-api
    build:
      context: ./src/schedule-service-api
      dockerfile: Dockerfile
    env_file:
      - .env
    volumes:
      - ./src/schedule-service-api:/app
      - .env:/app/.env
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.schedule-api.rule=PathPrefix(`/schedule`)"
      - "traefik.http.services.schedule-api.loadbalancer.server.port=8000"
    depends_on:
      - db
      - traefik
    networks:
      - web

  service-api:
    container_name: service-api
    build:
      context: ./src/services-service-api
      dockerfile: Dockerfile
    env_file:
      - .env
    volumes:
      - ./src/services-service-api:/app
      - .env:/app/.env
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.services-api.rule=PathPrefix(`/service`)"
      - "traefik.http.services.services-api.loadbalancer.server.port=8000"
    depends_on:
      - db
      - traefik
    networks:
      - web

  user-api:
    container_name: user-api
    build:
      context: ./src/user-service-api
      dockerfile: Dockerfile
    env_file:
      - .env
    volumes:
      - ./src/user-service-api:/app
      - .env:/app/.env
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.user-api.rule=PathPrefix(`/auth`)"
      - "traefik.http.services.user-api.loadbalancer.server.port=8000"
    depends_on:
      - db
      - traefik
    networks:
      - web

  db:
    container_name: postgres
    image: postgres:15
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - .env:/app/.env
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    networks:
      - web

volumes:
  postgres_data:

networks:
  web:
    driver: bridge
